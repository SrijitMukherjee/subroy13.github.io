<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Subhrajyoty Roy</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© All rights reserved for contents only, 2019</copyright><lastBuildDate>Fri, 31 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Intuitive Introduction to Differential Geometry</title>
      <link>/post/post4/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/post4/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In high school level, we generally hear about &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_geometry&#34;&gt;Euclidean Geometry&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Analytic_geometry&#34;&gt;Co-ordinate Geometry&lt;/a&gt;. If you are familiar in Co-ordinate Geometry, then you should be able to feel that theorems and consequences in Euclidean Geometry can be naturally extended to Co-ordinate Geometry. However, Co-ordinate Geometry is extremely specific to the co-ordinate system that we are using, for instance, if we are working on a plane (i.e. similar to Euclidean Geometry), then a planar co-ordinate system or &lt;a href=&#34;https://en.wikipedia.org/wiki/Cartesian_coordinate_system&#34;&gt;Catersian co-ordinate system&lt;/a&gt; is naturally used. However, when we are performing geometry on a sphere, naturally, &lt;a href=&#34;https://en.wikipedia.org/wiki/Polar_coordinate_system&#34;&gt;Polar coordinate system&lt;/a&gt; is used. However, suppose you are a Geographist, who wants to devise a coordinate system for the natural geography of Earth, clearly a Polar or Spherical Coordinate systen does not work, since the shape is Earth is similar to that of an ellipsoid. So, it could be very much useful if we can generalize the idea of coordinate system, to naturally represent any type of curvature, for instance, the image shown at the very beginning.&lt;/p&gt;

&lt;p&gt;Most of the recent advancements of geometry are developed for the specific needs of visualizing different abstract concepts of diverse mathematical fields. Generalizing the idea of coordinate system would allow one to think some abstract set (or family or collection of objects pertaining to the related mathematical theory) as a curvature, to which we can associate geometrical objects and visualize them in a different and distinguished way.&lt;/p&gt;

&lt;h1 id=&#34;a-general-curvature-manifold&#34;&gt;A General Curvature: Manifold&lt;/h1&gt;

&lt;p&gt;Suppose you want to create a map of the earth, however, earth is not flat (at least I am not a believer of &lt;a href=&#34;https://en.wikipedia.org/wiki/Flat_Earth&#34;&gt;Flat Earth Theory&lt;/a&gt;), so one would primarily find it confusing that we can create a flat map of earth. For example consider the following map from &lt;a href=&#34;https://www.welt-atlas.de/worldatlas&#34;&gt;World Atlas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;earth-map.png&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;But see that, we have a single location (like some part of Alaska &amp;amp; Russia) being mapped to two different places in the map. Also note that, due to the curvature of earth&#39;s surface, the supposedly gridlines are mapped to curved lines on the map. But if you look at it, there is a nice structure in the map, all the curved gridlines look very natural and aesthetically pleasing to understand. Moreover, if you draw tangent on the horizontal curves and tangent on the vertical curves, at their intersection point, you would find them meeting at a right angle. And if you are good at the field of &lt;strong&gt;Complex Analysis&lt;/strong&gt;, then you would probably figure out that it has something to do with analytic functions.&lt;/p&gt;

&lt;p&gt;Let us formalize the intutions that we have. We have an arbitrary set $S$, which can be called a &lt;strong&gt;Manifold&lt;/strong&gt;, if we have a one-one mapping $\phi : S\rightarrow \mathbb{R}^n$ for some $n\in \mathbb{N}$. Since the mapping is one-one, we can identify each point of $S$ by a $n$-length vector $v \in \mathbb{R}^n$, which can be used to serve as a coordinate system for the points in $S$. Going back to our example of earth, to identify a location in the surface of the earth, we lay out the map and find the x-coordinates (latitude) and the y-coordinates (longitude) of the particular location. So, we have a mapping (created by geographists) that maps $S$, the surface of the earth to $\mathbb{R}^2$. As you might have guessed, the number $n$ is the dimension of the manifold.&lt;/p&gt;

&lt;p&gt;Let me cite another motivating example from &lt;a href=&#34;https://en.wikipedia.org/wiki/Manifold&#34;&gt;Wikipedia page about Manifolds&lt;/a&gt; to show that only one mapping may not be good enough.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Circle_with_overlapping_manifold_charts.svg/1024px-Circle_with_overlapping_manifold_charts.svg.png&#34; width = &#34;200px&#34;&gt;&lt;/p&gt;

&lt;p&gt;Note that, the circle is essentially a curved line, with ends being merged together. Clearly, it is a one dimensional structure, although embedded on a 2-dimensional plane. So, to interpret it as a manifold, we need to create (a or several) one-one mapping(s) from it to $\mathbb{R}$. Let us consider the circle having center at origin and having radius equal to 1 unit. Here, we shall use $4$ different one-one mappings from part of the circle to the unit interval $[0, 1]$ which is a subset of $\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{align*}
\phi_{Top}((x, y)) &amp; = (x + 1)/2 \text{ if } y \geq 0\\
\phi_{Left}((x, y)) &amp; = (y + 1)/2 \text{ if } x &lt; 0\\
\phi_{Right}((x, y)) &amp; = (y + 1)/2 \text{ if } x \geq 0\\
\phi_{Bottom}((x, y)) &amp; = (x + 1)/2 \text{ if } y &gt; 0
\end{align*}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These simple functions actually give the one-one mapping shown in the above figure. Hence, for some point on the circle, we may end up having more than one representation.&lt;/p&gt;

&lt;p&gt;In general, manifolds can be very abstract. However, one usually puts some restrictions like those maps being smooth and analytic, so that it is easy to work with.&lt;/p&gt;

&lt;h1 id=&#34;defining-horizons&#34;&gt;Defining Horizons&lt;/h1&gt;

&lt;p&gt;When we walk on the earth, it seems that earth is flat, as we see horizons just straight ahead of us, not below us. This is precisely because earth&#39;s geometry is locally flat, i.e. at any point on earth, the local surface of the earth can be well approximated by a plane. Mathematically, this concept is called &lt;strong&gt;Tangent Spaces&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;defining-curves&#34;&gt;Defining Curves&lt;/h2&gt;

&lt;p&gt;To formalize the idea, we need to introduce curves. These are some lines on the surface of the manifold (or on the manifold). For our example, this means a path which we take when walking on the surface of the earth.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;curves.jpeg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Although the curve (the path shown in red) is a little jagged on the surface, usually mathematicians deal with the curves which are differentiable and smooth, and is easy to deal with mathematically. A curve $\gamma$ is a continuous function from $\mathbb{R}$ or some interval of $\mathbb{R}$ to the manifold $S$. For example consider a path $\gamma : [0, 1] \rightarrow S$, then $\gamma(0)$ and $\gamma(1)$ denotes the two endpoints of the curve.&lt;/p&gt;

&lt;h2 id=&#34;working-towards-tangents&#34;&gt;Working towards tangents&lt;/h2&gt;

&lt;p&gt;Now that you have a curve to walk on, you can stop at any point and ask where the horizon is. Similar to how we define tangents or derivatives of a function, we can think of the following quantity;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\gamma&#39;(x_0) = \lim_{x \rightarrow x_0}\dfrac{\gamma(x) - \gamma(x_0)}{(x - x_0)}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We could have done that precisely, but here&#39;s the catch, is the substraction $\gamma(x) - \gamma(x_0)$ is even possible? Since, in general, both these are elements of $S$, which being an arbitrary set, may not support simple operations like addition or multiplication. There are two ways we can circumvent the problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restrict the type of the manifold to fields or some special algebraic structures to allow support for addition or multiplication.&lt;/li&gt;
&lt;li&gt;Consider an arbitrary function $f : S \rightarrow\mathbb{R}$, which can be composed with the curve to define a derivative like thing. Then, we might try to explore possible ways to remove the arbitrary function from the expression.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 2nd approach is the one univocally taken by mathematical community. Here, we consider any function $f$, and consider the derivative;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{d}{dt}f(\gamma(t)) 
= \lim_{h \rightarrow 0}\dfrac{f(\gamma(t+h)) - f(\gamma(t))}{h}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Let the coordinate system $\phi : S\rightarrow \mathbb{R}^n$ be given as; $\phi(p) = [\xi_1(p), \xi_2(p), \dots \xi_n(p)]$, where $\xi_i$&#39;s are coordinate functions. Let, $\gamma(t)$ be denoted by the coordinates $[\gamma_1(t), \gamma_2(t), \dots \gamma_n(t)]$. Note that,&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\frac{d}{dt}f(\gamma(t)) 
= \sum_{i=1}^{n} \frac{\partial f}{\partial\xi_i} \frac{d\gamma_i(t)}{dt}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Note that, since we took $f$ to be an arbitrary function, the tangent is given by $\sum_{i=1}^{n} \frac{d\gamma_i(t)}{dt} \frac{\partial}{\partial\xi_i}$, i.e. some linear combination (based on which curve we are walking on) of the partial differential operators $\frac{\partial}{\partial\xi_i}$. Hence, the tangent space, i.e. the space (or set) containing all such tangents at a point $p$ on the manifold $S$, is given by a vector space, with basis being the partial differential operators $\left\{ \left( \frac{\partial}{\partial\xi_i} \right)_p : i = 1, 2, \dots n\right\}$.&lt;/p&gt;

&lt;h2 id=&#34;intuitive-understanding-of-tangents&#34;&gt;Intuitive Understanding of Tangents&lt;/h2&gt;

&lt;p&gt;Now probably you are trying to think how it all makes sense. Because after all, the tangent space is a vector space, and we generally are comfortable with vectors whose entries are some scaler quantities, specifically real numbers or complex numbers. So, how tangent spaces of manifolds have these $\left( \frac{\partial}{\partial\xi_i} \right)_p$ operators as a basis vector.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Tangentialvektor.svg/960px-Tangentialvektor.svg.png&#34; width = &#34;250px&#34;&gt;&lt;/p&gt;

&lt;p&gt;Carefully look at the picture above. The manifold $M$ is the curved regions shaded in dark grey. The tangent space $T_xM$ at the point $x$ contains all the vectors $v$ which are tangential to the manifold at the point $x$. One such vector $v$, shown in the image, does not belong to the manifold, but it belongs to the larger space in which the manifold is embedded. So, if we represent the tangent space using only $n$ element vector, this will end up specifying vectors in $\mathbb{R}^n$ (i.e. in the coordinate system), but this would only give some curve in the manifold, not something outside of the manifold $M$. Therefore, we need some type of generalization of vectors, which can be applied to any space (precisely the space where manifold $M$ is embedded in).&lt;/p&gt;

&lt;p&gt;The differential operator precisely does that. It tracks how the inverse map (or inverse coordinate system) $\phi^{-1}$ applies from $\mathbb{R}^n$ to the space (the space where manifold $M$ is embedded in), and hence it allows one to define vectors in that space, by tracking how changes in $\mathbb{R}^n$ transfers to that space.&lt;/p&gt;

&lt;h1 id=&#34;from-tangents-to-riemannian-manifold&#34;&gt;From Tangents to Riemannian Manifold&lt;/h1&gt;

&lt;p&gt;Now that we have a geometry of tangent space and the manifold, the next thing one would try to find is distance between two points on the manifold. We know that, linear algebra allows us to define distance through a norm or with inner product in general, and we have a vector space here to perform these linear algebra. So, for each point $p \in S$, i.e. point on the manifold, the tangent space $T_pS$ at $p$, is a vector space, hence can be equipped with a inner product. Such a manifold is called &lt;strong&gt;Riemannian&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let us use the notation $(\partial_i)_p$ to denote the basis vector $(\frac{\partial}{\partial\xi_i})_p$ in the tangent space $T_pS$. Also, we define an inner product $\langle (\partial_i)_p, (\partial_j)_p\rangle = (g_{ij})_p$. Then, we can define the matrix $G_p$ with entries $\left\{ (g_{ij})_p \right\}_{i, j =1}^n$, which constitutes the inner product matrix on the tangent space $T_pS$. Due to this being an inner product matrix, it must be positive definite matrix.&lt;/p&gt;

&lt;p&gt;Also, note that, the length of a vector in that space is;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\Vert D\Vert = \langle D, D\rangle = \sum_{i, j = 1}^n (g_{ij})_p D_iD_j\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where $D = \sum_i D_i (\partial_i)_p$. Generalizing this notion, we can find small such distances on the tangent spaces, and add (or integrate) them up in order to find the distance of a curve on that manifold. So, if $\gamma : [a, b]\rightarrow S$, is a curve on the manifold $S$, then its length is simply given by;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\Vert\gamma\Vert = \int_{a}^{b} (g_{ij})_p (\gamma&#39;_i)_p(\gamma&#39;_j)_p dt\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where $(\gamma&#39;_i)_p = (\frac{\partial}{\partial t}\gamma_i)_{\gamma^{-1}(p)}$, where $\gamma_i(t)$&#39;s are the coordinates of $\gamma(t)$. So, you consider the derivative of the coordinate functions of the curve at the point $\gamma^{-1}(p)$, i.e. the point of $t \in [a, b]$ at which we have the curve function at required point $p$, so that we can use corresponding tangent space in order to calculate length.&lt;/p&gt;

&lt;h1 id=&#34;generalizing-straight-lines&#34;&gt;Generalizing Straight Lines&lt;/h1&gt;

&lt;p&gt;Using these concept of lengths, we can define &lt;strong&gt;Geodesics&lt;/strong&gt;, which are kind of a generalized version of straight line. In a euclidean plane, a striaght line is a axiomatically defined as the curve which has minimum distance when connecting two points.&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;geodesic.jpg&#34; alt=&#34;&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;In this figure for example, the blue points shown on the plane, are connected via a curve which entirely lies on the plane, hence the curve with smallest such distance is the straight line segment joining those points. However, if we take two points on the surface of the sphere, then the shortest possible curve joining those two, which entirely lies on the surface of that sphere is a curved line. For instance, if you think of going from Hong Kong to New York, you cannot travel in a straight line, since that would require you to dig through earth&#39;s crust, make a tunnel to travel through. However, if we consider the shortest possible curve, which a aeroplane takes, is actually a curved line in 3-dimensional space, but is natural analogue to the gridlines (i.e. the meridians or latitudal lines), hence seems like a straight line with respect to the surface of the manifold.&lt;/p&gt;

&lt;p&gt;Hence, as we know precisely how we can define lengths on a Riemannian manifold, we can move on to compute geodesic. Intuitively, for many cases, finding the geodesic is easier, once we use the coordinate functions. Note that, $\phi: S\rightarrow \mathbb{R}^n$ is our coordinate map of the manifold $S$. Hence, any geodesic in the manifold would in principal, be a geodesic in the coordinate system (which happens under certain tricky mathematical conditions), hence, we can, in principle, find the geodesic connecting the point $a, b\in S$, as;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\left\{ \phi^{-1}(\phi(a) t + (1-t)\phi(b)) : t \in [0, 1] \right\}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;since $\phi(a) t + (1-t)\phi(b)$, as $t\in[0, 1]$ is the equation of the straight line connecting the coordinates $\phi(a)$ and $\phi(b)$ in the coordinate space, and then for each point on that line, we invert it back to the manifold to get a geodesic connecting $a$ and $b$.&lt;/p&gt;

&lt;p&gt;However, such intuitive things break down under a very general conditions. Surprisingly enough, on the surface of a manifold, you can create a generalized triangle, whose sides are geodesics, and have the sum of the angles of the triangle be greater or less than 180 degrees. For instance, we see one such example on our beloved planet as well.&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
&lt;div class =&#34;col-md-6&#34;&gt;&lt;img src = &#34;more180.jpg&#34; width=&#34;100%&#34;&gt;&lt;/div&gt;
&lt;div class =&#34;col-md-6&#34;&gt;&lt;img src = &#34;less180.png&#34; width=&#34;100%&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So, as you can guess, many intuitive results of Euclidean geometry breaks down, thus creating a lot of newer scope of growth in this discipline.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Manifold&#34;&gt;https://en.wikipedia.org/wiki/Manifold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shun-Ichi Amari, Hiroshi Nagaoka - Methods of information geometry-American Mathematical Society (2000)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it! ð&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Texture Networks</title>
      <link>/post/post3/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/post3/</guid>
      <description>

&lt;p&gt;This is a rather long post, but here we shall about something really interesting, about how to mix the content of a picture with the style from another picture, called Neural Style Transfer. &lt;strong&gt;Texture Networks&lt;/strong&gt; is a Neural Network approach devised by Dmitry Ulyanov, Vadim Lebedev, Andrea Vedaldi and Victor Lempitsky in 2016, which is extremely useful to synthesize new types of textures (which is extensively used in production of clothings with exclusive designs), as well as being able to work as a style transfer mechanism.&lt;/p&gt;

&lt;h2 id=&#34;what-is-neural-style-transfer&#34;&gt;What is Neural Style Transfer?&lt;/h2&gt;

&lt;p&gt;I think the answer to this question is better to show visually, rather than talking about it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./out1.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./out2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./out3.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;So, I think now one should get the idea. Neural Style transfer combines the aesthestics of an image on to another image (here the image of the girl named Karya, which has been provided by &lt;a href=&#34;https://github.com/DmitryUlyanov/texture_nets&#34; target=&#34;_blank&#34;&gt;Dmitry Ulyanov&amp;rsquo;s Github&lt;/a&gt;), retaining the content of the image (i.e. retaining the girl in the stylized output). Note that, the effect is particularly visible in 2nd and 3rd images, whereas, for first image, the style aspect is greatly emphasized.&lt;/p&gt;

&lt;p&gt;I am going to discuss exactly how I created those stylized images, and hopefully, after reading this, you would be able to reproduce similar results with images of your choice.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;I am not talking about things you need to know beforehand to understand intricate details of the mechanism, but the software requirements that I will be using to create something similar to texture networks. So, at the very beginning, I import all required packages in &lt;code&gt;python&lt;/code&gt;. Also, I shall be using a &lt;strong&gt;NVidia GeForce GTX 1060Ti&lt;/strong&gt; Graphics card with CUDA computing capability 6.1, which is not at par with the GPU devices used at professional level, but this speeds up the computations by a lot rather than using a CPU.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tensorflow as tf
import numpy as np
import time
import functools
import PIL.Image
import IPython.display as display
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf.__version__
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;2.1.0-rc0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf.test.gpu_device_name()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;/device:GPU:0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-some-utility-functions&#34;&gt;Making Some Utility Functions&lt;/h2&gt;

&lt;p&gt;Before proceeding with describing how the Texture Network is created, I would create some utility functions to help us later. For instance, this utility functions will allow us to load images from a path, and visualize an image given its tensor.&lt;/p&gt;

&lt;h3 id=&#34;what-is-a-tensor&#34;&gt;What is a tensor?&lt;/h3&gt;

&lt;p&gt;Let us revisit some high school mathematics for a bit. We know that matrix is an 2-dimensional array of numbers, if simply put. &lt;a href=&#34;https://en.wikipedia.org/wiki/Tensor&#34; target=&#34;_blank&#34;&gt;Tensor&lt;/a&gt; is a generalization of that, it is an n-dimensional array.&lt;/p&gt;

&lt;p&gt;Now, when a mathematician introduces matrix, it is essentially an efficient way of representing linear functions from a vector space to another vector space. A &lt;strong&gt;Vector Space&lt;/strong&gt; is a space comprised of vectors, and a vector is something that satisfies some mathematical properties. But, we don&amp;rsquo;t need that. Think of vectors in the most simple way, it is something that has a magnitude and a direction, like speed.&lt;/p&gt;

&lt;p&gt;Coming back to tensor, it is introduced as an efficient representation of &lt;strong&gt;Multilinear Maps&lt;/strong&gt; between vector spaces. Let $V_1, V_2, \dots V_n, W$ be some vector spaces, then, a function $f : V_1 \times V_2 \times\dots V_n \rightarrow W$ is said to be multilinear map, if $f(v_1, v_2, \dots v_i, \dots v_n)$ is linear in $v_i$ given all other arguments $v_1, \dots v_{i-1}, v_{i+1}, \dots v_n$ are fixed. And such linearity holds of any of its arguments. So, if you know mathematics of Linear Algebra and Matrices, then you would clearly understand that tensor is just a multidimensional generalization of matrices.&lt;/p&gt;

&lt;h3 id=&#34;what-an-image-is-do-to-with-tensor&#34;&gt;What an Image is do to with Tensor?&lt;/h3&gt;

&lt;p&gt;Now, to understand how tensor comes into play to define images, one needs to understand the mechanism of how an image is stored digitally. For this, consider a black grid like chessboard, but all cells are coloured white. Now, you start colouring some cells to black, and then you would be able to generate some pictures with tons of block like artifacts. The following example from &lt;a href=&#34;http://logicalzero.com/gamby/reference/image_formats.html&#34; target=&#34;_blank&#34;&gt;logicalzero.com&lt;/a&gt; shows such a smiley face just colouring a 8x8 grid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./smiley.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;A smiley was okay, but it was not very appealing. Now, since we have a 8x8 grid, and each of the cells can be coloured in 2 ways, black or white. Hence, by simple combinatorics, this generates $2^{256}$ possible images, out of this 8x8 grid, which is about $1.15 \times 10^{77}$. That&amp;rsquo;s a lot! However, not all such combinations will result in visually appealing images, something that we can actually call as a potential image with our natural sense. So, among these vast majority of combinations, only a few will make up images, that our brain can visualize and understand as an image.&lt;/p&gt;

&lt;p&gt;However, if we wish to create more complicated images, we need a bigger grid. The reason being that these 8x8 grid cannot be used to approximate complicated curves in the image we encounter in daily life. For instance, increasing the number of cells in the grid, we can create an image of a panda.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;nonogram.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This image transpires as a solution of a puzzle called &lt;a href=&#34;https://en.wikipedia.org/wiki/Nonogram&#34; target=&#34;_blank&#34;&gt;Nonogram&lt;/a&gt;, which is also called as Picross or Visual Crosswords or Japanese Crosswords.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using finer grids actually results in a better picture, as you can see. Digital black and white images are represented using the technique described above, and each of the grid cell is called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Pixel&#34; target=&#34;_blank&#34;&gt;Pixel&lt;/a&gt;. Now, note that, we can represent this grid using a 2-dimensional matrix of 0&amp;rsquo;s and 1&amp;rsquo;s, where a white pixel would be represented as 0 and a black pixel would be repesented as 1. For instance, the smiley image can be matrixified like this:&lt;/p&gt;

&lt;div style=&#34;width: 500px; margin:auto; display: flex;&#34;&gt;
&lt;img src=&#34;./smiley.png&#34; style=&#34;display: inline-block;&#34;/&gt;

&lt;div style = &#34;display: inline-block;&#34;&gt;
    $$\begin{bmatrix}
    0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\\
    0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\\
    1 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1\\
    1 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1\\
    1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1\\
    1 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1\\
    0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\\
    0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\\
    \end{bmatrix}$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we shall use colour images in this context of Neural Style Transfer. To represent a colour image, we require 3 such matrices. One for Red channel, one for Blue channel and another for Green Channel. Also, the elements of the matrices will be allowed to take values between 0 and 255 (to be represented by 8 digit binary numbers) or to take any real value between 0 and 1, representing the denisty of the colour. For instance, in the above black and white images, we can put the value 0.5 in some elements to represent that those pixels should be coloured using gray, which is a colour midway between black and white. Hence, allowing floating point values would ensure a richer distribution of images.&lt;/p&gt;

&lt;p&gt;Coming back to the link between images and tensor, an image is represented by 3 such matrices, in combination, a 3-dimensional tensor, which the dimension or shape being (3, height of the image, width of the image), where 3 being number of channels.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def tensor_to_image(tensor):
    tensor = tf.clip_by_value(tensor, clip_value_min=0.0, clip_value_max=255.0)
    tensor = np.array(tensor, dtype=np.uint8)   # convert tf array to np array of integers
    if np.ndim(tensor)&amp;gt;3:
        assert tensor.shape[0] == 1  # asserts that the BATCH_SIZE = 1
        tensor = tensor[0]   # take the first image
    return PIL.Image.fromarray(tensor)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def load_img(path_to_img, rescale = False):
    # we rescale the image to max dimension 256 for fasters processing
    max_dim = 256    
    img = tf.io.read_file(path_to_img)   # read the image
    img = tf.image.decode_image(img, channels=3)    # decode into image content
    img = tf.image.convert_image_dtype(img, tf.float32)    # convert to float
    
    if rescale:
        img = tf.image.resize(img, tf.constant([max_dim, max_dim]))
    else:
        shape = tf.cast(tf.shape(img)[:-1], tf.float32)   
        # get the shape of image, cast it to float type for division, expect the last channel dimension
        long_dim = max(shape)
        scale = max_dim / long_dim    # scale accordingly
        new_shape = tf.cast(shape * scale, tf.int32)   # cast the new shape to integer
        img = tf.image.resize(img, new_shape)   # resize image
        
    img = img[tf.newaxis, :]   # newaxis builts a new batch axis in the image at first dimension
    return img
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;style_path = &#39;../input/artistic-style-transfer/pattern-rooster.jpg&#39;
content_path = &#39;../input/artistic-style-transfer/celebGAN_male.png&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;content_image = load_img(content_path, rescale = True)
tensor_to_image(content_image * 255.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_13_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is the content image, on which we shall apply some style. Note that, the loaded images have elements between 0 and 1, while the &lt;code&gt;tensor_to_img&lt;/code&gt; function takes in a tensor with values between 0 and 255, hence we need to multiply all the elements by 255 to convert it to the crucial range where it can be visualized.&lt;/p&gt;

&lt;p&gt;Surprisingly, the image I am using is actually an image generated via Neural Network called &lt;a href=&#34;https://arxiv.org/abs/1710.10196&#34; target=&#34;_blank&#34;&gt;Progressive GAN&lt;/a&gt;, which is really interesting work by Tero Karras, Timo Aila, Samuli Laine, Jaakko Lehtinen, who trained a network on &lt;strong&gt;Celeb A&lt;/strong&gt; dataset to generate images of new celebrities, who do not exist in real life.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;style_image = load_img(style_path, rescale = False)
tensor_to_image(style_image * 255.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_15_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is the style image that we can going to use. So, we think, the final image would look like the image of the artificial celebrity, tessalatted like the style image.&lt;/p&gt;

&lt;h1 id=&#34;architecture-of-texture-network&#34;&gt;Architecture of Texture Network&lt;/h1&gt;

&lt;p&gt;Texture Network comprised of two main components.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A Generator Network.&lt;/li&gt;
&lt;li&gt;A Descriptor Network.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A &lt;strong&gt;Generator Network&lt;/strong&gt; is a neural network which takes input of the content image and some random noise, and output our desired stylized image.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Descriptor Network&lt;/strong&gt; is a neural network which takes input of the desired stylized image, and then try to figure out the underlying style and content of the stylized image, and try to match it with the original style image and content image.&lt;/p&gt;

&lt;p&gt;If you are familiar with &lt;a href=&#34;https://en.wikipedia.org/wiki/Generative_adversarial_network&#34; target=&#34;_blank&#34;&gt;Generative Adversarial Networks&lt;/a&gt; (GAN), then you would find a lot similarity of Texture Network with GANs. However, unlike to the case of GAN, here, the descriptor network will not be trained, but will be used to measure the style and content of the stylized images generated by Generator Network.&lt;/p&gt;

&lt;p&gt;To understand why such a descriptor network is needed at all, consider an image of a person. If one shifts the image just by one pixel to the left, then using a simple squared error loss between the original image and shifted image would become large, however, from our perception, both images would look identical. Hence, to actually compare the two images, we specifically need to compare high level representations of the images, which will be provided by the descriptor network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;texnet.png&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;choice-of-descriptor-network&#34;&gt;Choice of Descriptor Network&lt;/h2&gt;

&lt;p&gt;We use &lt;a href=&#34;https://arxiv.org/abs/1409.1556&#34; target=&#34;_blank&#34;&gt;VGG19&lt;/a&gt; as our descriptor network as it is a Very Deep Convolutional Networks for Large-Scale Image Recognition. It was developed by Karen Simonyan, Andrew Zisserman in 2014, and is trained with the ImageNet dataset, comprising of millions of images. Hence, high level features of this network will be an acurate representation of the style and content of images.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;vgg = tf.keras.applications.VGG19(include_top=False, weights=&#39;imagenet&#39;)   # Load VGG19 pretrained Network from Keras

print()
for layer in vgg.layers:
    print(layer.name)   # print layer names so that we can reference them later
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Downloading data from https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5
80142336/80134624 [==============================] - 1s 0us/step

input_1
block1_conv1
block1_conv2
block1_pool
block2_conv1
block2_conv2
block2_pool
block3_conv1
block3_conv2
block3_conv3
block3_conv4
block3_pool
block4_conv1
block4_conv2
block4_conv3
block4_conv4
block4_pool
block5_conv1
block5_conv2
block5_conv3
block5_conv4
block5_pool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, VGG19 has a sturcture called a Convolutional Block. Each such block consists of 5 layers of neuron, the first 4 layers being convolutional layers, and the last layers being a pooling layer. The top layer which was excluded from the loaded model is specifically a hidden dense layer that connects the final pooled layer to the output layer, which outputs the classification of the Imagenet image. However, we do not need this final hidden dense layer.&lt;/p&gt;

&lt;h2 id=&#34;creating-generator-network&#34;&gt;Creating Generator Network&lt;/h2&gt;

&lt;p&gt;To build the generator network, we need something called a Circular Convolution. To understand various convolutional arithmetic properly, I would recommend checking out the following resources.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vdumoulin/conv_arithmetic&#34; target=&#34;_blank&#34;&gt;https://github.com/vdumoulin/conv_arithmetic&lt;/a&gt; contains a simple animation showing convolutions with different parameters.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ezyang.github.io/convolution-visualizer/index.html&#34; target=&#34;_blank&#34;&gt;https://ezyang.github.io/convolution-visualizer/index.html&lt;/a&gt; has a really good interactive environment where you can set the parameters and take look at the corresponding convolutional operation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Coming back to circular convolution, it is a simple 2-dimensional convolution with with a particular type of padding called &lt;strong&gt;Circular Padding&lt;/strong&gt;. It essentially wraps the image from top to bottom and from left to right.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def periodic_padding(x, padding=1):
    &#39;&#39;&#39;
    x: shape (batch_size, d1, d2)
    return x padded with periodic boundaries. i.e. torus or donut
    &#39;&#39;&#39;
    d1 = x.shape[1] # dimension 1: height
    d2 = x.shape[2] # dimension 2: width
    p = padding
    # assemble padded x from slices
    #            tl,tc,tr
    # padded_x = ml,mc,mr
    #            bl,bc,br
    top_left = x[:, -p:, -p:] # top left
    top_center = x[:, -p:, :] # top center
    top_right = x[:, -p:, :p] # top right
    middle_left = x[:, :, -p:] # middle left
    middle_center = x # middle center
    middle_right = x[:, :, :p] # middle right
    bottom_left = x[:, :p, -p:] # bottom left
    bottom_center = x[:, :p, :] # bottom center
    bottom_right = x[:, :p, :p] # bottom right
    top = tf.concat([top_left, top_center, top_right], axis=2)
    middle = tf.concat([middle_left, middle_center, middle_right], axis=2)
    bottom = tf.concat([bottom_left, bottom_center, bottom_right], axis=2)
    padded_x = tf.concat([top, middle, bottom], axis=1)
    return padded_x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the function &lt;code&gt;periodic_padding&lt;/code&gt;, we give several input images, however, with only one channel for each image. Here, the input is a tensor of the shape (number of images, height of the image, width of the image). Hence, we can think of the input as if we are passing many 2-dimensional matrices of shape (height of the image, width of the image). We also pass the amount of padding that we want. Let us see what it outputs, when we pass a single 2D matrix as follows;&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
 1 &amp;amp; 2 &amp;amp; 3 \\ 4 &amp;amp; 5 &amp;amp; 6 \\ 7 &amp;amp; 8 &amp;amp; 9
\end{bmatrix}$$&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = tf.constant([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]])
periodic_padding(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tf.Tensor: shape=(1, 5, 5), dtype=int32, numpy=
array([[[9, 7, 8, 9, 7],
        [3, 1, 2, 3, 1],
        [6, 4, 5, 6, 4],
        [9, 7, 8, 9, 7],
        [3, 1, 2, 3, 1]]], dtype=int32)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, the output tensor has size 5x5, which it obtained by one unit of padding in top, bottom, left and right. Also note that, to the left of 1, we have 3, hence it is as if the rightmost column of the original matrix is wrapped to the left side of the matrix. Similar wrapping is also seen in vertical direction.&lt;/p&gt;

&lt;p&gt;However, for an image, we need to perform this circular padding for each of the channel. Hence, we first split up the 3 channels of the image, then append circular padding for each one, and finally combine them together. This is done through &lt;code&gt;CircularPadding&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def CircularPadding(inputs, kernel_size = 3):
    &amp;quot;&amp;quot;&amp;quot;Prepares padding for Circular convolution&amp;quot;&amp;quot;&amp;quot;
    # split all the filters
    n_filters_in = inputs.shape[-1]
    input_split = tf.split(inputs, n_filters_in, axis = -1)
    output_split = []
    for part in input_split:
        part = tf.squeeze(part, axis = -1)
        outs = periodic_padding(part, padding = int(kernel_size / 2))
        outs = tf.expand_dims(outs, axis = -1)
        output_split.append(outs)
    return tf.concat(output_split, axis = -1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;convolution.png&#34; width = &#34;500px&#34;&gt;&lt;/p&gt;

&lt;p&gt;The diagram above shows the main idea of a convolutional layer. Let us say, we have an image, represented by a 5x5x3 tensor (pretty bad for visualizing, but pretty good for understanding), and we wish to perform convolution of this image with a 3x3 kernel. Then the convolution is basically a weighted combination of all the neighbouring pixels from all the layers. To understand mathematically, let us introduce some notations.&lt;/p&gt;

&lt;p&gt;Let $X$ denote the tensor image, and $X_{ijc}$ denote the value of the $(i, j)$-th pixel at the $c$-th channel. Now, let us say we wish to find out the value of the convolution at $(i_0, j_0)$ cell. Then, the convolution is defined as;&lt;/p&gt;

&lt;p&gt;$$H(i_0, j_0) = b + \sum_{(i, j) \in N(i_0, j_0)}\sum_{c} X_{ijc} K((i - i_0), (j - j_0), c)$$&lt;/p&gt;

&lt;p&gt;where $K(\cdot, \cdot, \cdot)$ is kernel weights i.e. some parameters of the network which the network is going to learn. Also, the parameter $b$ is the bias term and $N(i_0, j_0)$ is a neighbourhood of the pixel $(i_0, j_0)$. Therefore, if we have an image with $n$ channels, and we convolute a $k\times k$ kernel on it, then we specifically require $(k^2n + 1)$ parameters including a bias term.&lt;/p&gt;

&lt;h3 id=&#34;why-do-we-need-convolution&#34;&gt;Why do we need Convolution?&lt;/h3&gt;

&lt;p&gt;To understand convolution better, consider two vectors $\textbf{x} = [x_1, x_2, \dots x_n]$ and $\textbf{y} = [y_1, y_2, \dots y_n]$, then the dot product between them is defined as;&lt;/p&gt;

&lt;p&gt;$$\textbf{x}\cdot\textbf{y} = \sum_{k=1}^{n} x_ky_k$$&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s high school algebra. However, we also know that, dot product measures the similarity between the vectors $\textbf{x}$ and $\textbf{y}$, i.e. it is maximum when $\textbf{x},\textbf{y}$ are collinear, and is minimum when these are orthogonal to each other. Note that, the above formula of convolution exactly looks like the formula of a dot product, hence it measures the similarity between the patch of the image and the kernel that we have.&lt;/p&gt;

&lt;p&gt;Now suppose, we have a kernel that looks like as follows:&lt;/p&gt;

&lt;p&gt;$$K = \begin{bmatrix}
-1 &amp;amp; 1 &amp;amp; -1\\ -1 &amp;amp; 1 &amp;amp; -1\\ -1 &amp;amp; 1 &amp;amp; -1
\end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;Then, if we convolute the image with this kernel, then it attains maximum value when we have a horizontal line, and it will attain minimum value when we have a vertical line. Hence, the convolution will tell us the presence of horizontal and vertical edges in the images, hence will provide combined information or featurs about the images to next level. Similar lower level features can again be convoluted to give rise to higher level features.&lt;/p&gt;

&lt;p&gt;It should also be ntoeworthy that each such result of convolution will tells about existence of one particular feature in the image. Hence, to effectively use it, we shall need to learn many such features, which in the literature of &lt;strong&gt;Image Processing&lt;/strong&gt; is described as filters.&lt;/p&gt;

&lt;p&gt;Coming back to the Design of Generator of Texture Network, we need several blocks. There are mainly two types of blocks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Convolutional Block:&lt;/strong&gt; It takes the input tensor (may be image or may be features processed in lower level of the network), and performs some Circular Convolution to process the tensor further and obtain some higher level features.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Join Block:&lt;/strong&gt; It takes the lower resolution tensor and a high resolution processed noise tensor as input, then it upsamples the lower resolution tensor to match the shape of the high resolution noise and finally merges them together. This noise actually allows the image to have very delicate and intricate variation in the image, as well as create the effect of increment of resolution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;designing-convolutional-block&#34;&gt;Designing Convolutional Block&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def conv_block(input_size, in_filters, out_filters):
    &amp;quot;&amp;quot;&amp;quot;Implements the convolutional block with 3x3, 3x3, 1x1 filters, with proper batch normalization and activation&amp;quot;&amp;quot;&amp;quot;
    inputs = tf.keras.layers.Input((input_size, input_size, in_filters, ))   # in_filters many channels of input image
    
    # first 3x3 conv
    conv1_pad = tf.keras.layers.Lambda(lambda x: CircularPadding(x))(inputs)
    conv1_out = tf.keras.layers.Conv2D(out_filters, kernel_size = (3, 3), strides = 1, 
                                       padding = &#39;valid&#39;, name = &#39;conv1&#39;)(conv1_pad)
    hidden_1 = tf.keras.layers.BatchNormalization()(conv1_out)
    conv1_out_final = tf.keras.layers.LeakyReLU(name = &#39;rel1&#39;)(hidden_1)
    
    # second 3x3 conv
    conv2_pad = tf.keras.layers.Lambda(lambda x: CircularPadding(x))(conv1_out_final)
    conv2_out = tf.keras.layers.Conv2D(out_filters, kernel_size = (3, 3), strides = 1, 
                                       padding = &#39;valid&#39;, name = &#39;conv2&#39;)(conv2_pad)
    hidden_2 = tf.keras.layers.BatchNormalization()(conv2_out)
    conv2_out_final = tf.keras.layers.LeakyReLU(name = &#39;rel2&#39;)(hidden_2)
    
    # final 1x1 conv
    conv3_out = tf.keras.layers.Conv2D(out_filters, kernel_size = (1, 1), strides = 1, 
                                       padding = &#39;same&#39;, name = &#39;conv3&#39;)(conv2_out_final)
    hidden_3 = tf.keras.layers.BatchNormalization()(conv3_out)
    conv3_out_final = tf.keras.layers.LeakyReLU(name = &#39;rel3&#39;)(hidden_3)
    
    # final model
    conv_block = tf.keras.models.Model(inputs, conv3_out_final)
    return conv_block
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = conv_block(16, 3, 8)
model.summary()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Model: &amp;quot;model&amp;quot;
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, 16, 16, 3)]       0         
_________________________________________________________________
lambda (Lambda)              (None, 18, 18, 3)         0         
_________________________________________________________________
conv1 (Conv2D)               (None, 16, 16, 8)         224       
_________________________________________________________________
batch_normalization (BatchNo (None, 16, 16, 8)         32        
_________________________________________________________________
rel1 (LeakyReLU)             (None, 16, 16, 8)         0         
_________________________________________________________________
lambda_1 (Lambda)            (None, 18, 18, 8)         0         
_________________________________________________________________
conv2 (Conv2D)               (None, 16, 16, 8)         584       
_________________________________________________________________
batch_normalization_1 (Batch (None, 16, 16, 8)         32        
_________________________________________________________________
rel2 (LeakyReLU)             (None, 16, 16, 8)         0         
_________________________________________________________________
conv3 (Conv2D)               (None, 16, 16, 8)         72        
_________________________________________________________________
batch_normalization_2 (Batch (None, 16, 16, 8)         32        
_________________________________________________________________
rel3 (LeakyReLU)             (None, 16, 16, 8)         0         
=================================================================
Total params: 976
Trainable params: 928
Non-trainable params: 48
_________________________________________________________________
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf.keras.utils.plot_model(model, show_shapes=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_29_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the function &lt;code&gt;conv_block&lt;/code&gt;, we take the height and width of the input tensor and the number of channels of the input tensor, and the number of filters to finally output after processing. Note that, after each of the Circular Convolution, we perform a Batch Normalization and a Leaky ReLU layer.&lt;/p&gt;

&lt;p&gt;Batch Normalization layer basically normalizes the outputs with respect to the batch axis (i.e. with respect to the ? or None axis indicated in the diagram, which means you are pass arbitrary number of images through the network) so that the mean values remain close to 0, and standard deviation remains close to 1. The following image from the &lt;a href=&#34;https://arxiv.org/abs/1803.08494&#34; target=&#34;_blank&#34;&gt;2018 paper on Group Normalization&lt;/a&gt; by Yuxin Wu, Kaiming He described the idea of normalization through the following interesting image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;norm.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;Finally, Leaky ReLU is a layer than performs an nonlinear activation to the input vector. Leaky ReLU is basically the following function;&lt;/p&gt;

&lt;p&gt;$$f(x) = \begin{cases}
x &amp;amp; \text{ if } x \geq 0 \\ \alpha x &amp;amp; \text{ if } x &amp;lt; 0
\end{cases}$$&lt;/p&gt;

&lt;p&gt;where $\alpha &amp;lt; 1$ is a non-trainable constant. It is usually fixed at a very low value like $0.05$ or $0.01$. Compared to that, ReLU function is similar to Leaky ReLU, but it outputs 0 if $x &amp;lt; 0$. Hence, Leaky ReLU is essentially a leaky version of ReLU, as it leaks out some small value for negative arguments. Since, such nonlinearity does not require additional parameters, we see 0 in the above summary output.&lt;/p&gt;

&lt;h3 id=&#34;designing-join-block&#34;&gt;Designing Join Block&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def join_block(input_size, n_filter_low, n_filter_high):
    input1 = tf.keras.layers.Input((input_size, input_size, n_filter_low, ))  # input to low resolution image
    input2 = tf.keras.layers.Input((2*input_size, 2*input_size, n_filter_high, ))  # input to high resolution image
    upsampled_input = tf.keras.layers.UpSampling2D(size = (2, 2))(input1)
    hidden_1 = tf.keras.layers.BatchNormalization()(upsampled_input)
    hidden_2 = tf.keras.layers.BatchNormalization()(input2)
    
    outputs = tf.keras.layers.Concatenate(axis=-1)([hidden_1, hidden_2])
    
    # final model
    join_block = tf.keras.models.Model([input1, input2], outputs)
    return join_block
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = join_block(128, 32, 8)
model.summary()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Model: &amp;quot;model_1&amp;quot;
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input_3 (InputLayer)            [(None, 128, 128, 32 0                                            
__________________________________________________________________________________________________
up_sampling2d (UpSampling2D)    (None, 256, 256, 32) 0           input_3[0][0]                    
__________________________________________________________________________________________________
input_4 (InputLayer)            [(None, 256, 256, 8) 0                                            
__________________________________________________________________________________________________
batch_normalization_3 (BatchNor (None, 256, 256, 32) 128         up_sampling2d[0][0]              
__________________________________________________________________________________________________
batch_normalization_4 (BatchNor (None, 256, 256, 8)  32          input_4[0][0]                    
__________________________________________________________________________________________________
concatenate (Concatenate)       (None, 256, 256, 40) 0           batch_normalization_3[0][0]      
                                                                 batch_normalization_4[0][0]      
==================================================================================================
Total params: 160
Trainable params: 80
Non-trainable params: 80
__________________________________________________________________________________________________
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf.keras.utils.plot_model(model, show_shapes=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_33_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;join block&lt;/code&gt; is extremely simple, it upsamples the low resolution processed features of the image. Then it normalizes both the higher resolution processed noise, and upsampled version of low resolution features, so that the effect of both branches remain comparable in the network. Finally, it combines the normalized versions.&lt;/p&gt;

&lt;h3 id=&#34;completing-the-generator&#34;&gt;Completing the Generator&lt;/h3&gt;

&lt;p&gt;According to the &lt;a href=&#34;https://arxiv.org/abs/1603.03417&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; describing Texture Networks, the generator should have a structure similar to the following figure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;gen.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;However, it was also mentioned that for style transfer, increasing the number of noise from 5 to 6, actually provides much better quality. So, we start the network from a noise of size 8x8x3, and keep increasing it till 256x256x3, which is of the same size of our original content image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def generator_network():
    # create input nodes for noise tensors
    noise1 = tf.keras.layers.Input((256, 256, 3, ), name = &#39;noise_1&#39;)
    noise2 = tf.keras.layers.Input((128, 128, 3, ), name = &#39;noise_2&#39;)
    noise3 = tf.keras.layers.Input((64, 64, 3, ), name = &#39;noise_3&#39;)
    noise4 = tf.keras.layers.Input((32, 32, 3, ), name = &#39;noise_4&#39;)
    noise5 = tf.keras.layers.Input((16, 16, 3, ), name = &#39;noise_5&#39;)
    noise6 = tf.keras.layers.Input((8, 8, 3, ), name = &#39;noise_6&#39;)
    content = tf.keras.layers.Input((256, 256, 3, ), name = &#39;content_input&#39;)

    # downsample the content image
    content_image_8 = tf.keras.layers.Lambda(lambda x: tf.image.resize(x, tf.constant([8, 8])))(content)
    content_image_16 = tf.keras.layers.Lambda(lambda x: tf.image.resize(x, tf.constant([16, 16])))(content)
    content_image_32 = tf.keras.layers.Lambda(lambda x: tf.image.resize(x, tf.constant([32, 32])))(content)
    content_image_64 = tf.keras.layers.Lambda(lambda x: tf.image.resize(x, tf.constant([64, 64])))(content)
    content_image_128 = tf.keras.layers.Lambda(lambda x: tf.image.resize(x, tf.constant([128, 128])))(content)
    
    # create concatenation of downsampled content image and input nodes
    noise6_con = tf.keras.layers.Concatenate(axis=-1)([noise6, content_image_8])
    noise5_con = tf.keras.layers.Concatenate(axis=-1)([noise5, content_image_16])
    noise4_con = tf.keras.layers.Concatenate(axis=-1)([noise4, content_image_32])
    noise3_con = tf.keras.layers.Concatenate(axis=-1)([noise3, content_image_64])
    noise2_con = tf.keras.layers.Concatenate(axis=-1)([noise2, content_image_128])
    noise1_con = tf.keras.layers.Concatenate(axis=-1)([noise1, content])
    
    noise6_conv = conv_block(8, 6, 8)(noise6_con)   # that produces 8x8x8 tensor
    noise5_conv = conv_block(16, 6, 8)(noise5_con)   # that produces 16x16x8 tensor
    join5 = join_block(8, 8, 8)([noise6_conv, noise5_conv])   # that produces 16x16x16 tensor
    
    join5_conv = conv_block(16, 16, 16)(join5)   # produces 16x16x16 tensor
    noise4_conv = conv_block(32, 6, 8)(noise4_con)   # that produces 32x32x8 tensor
    join4 = join_block(16, 16, 8)([join5_conv, noise4_conv])   # produces 32x32x24 tensor
    
    join4_conv = conv_block(32, 24, 24)(join4)   # produces 32x32x24 tensor
    noise3_conv = conv_block(64, 6, 8)(noise3_con)  # that produces 64x64x8 tensor
    join3 = join_block(32, 24, 8)([join4_conv, noise3_conv])   # produces 64x64x32 tensor
    
    join3_conv = conv_block(64, 32, 32)(join3)   # produces 64x64x32 tensor
    noise2_conv = conv_block(128, 6, 8)(noise2_con)  # that produces 128x128x8 tensor
    join2 = join_block(64, 32, 8)([join3_conv, noise2_conv])   # produces 128x128x40 tensor
    
    join2_conv = conv_block(128, 40, 40)(join2)   # produces 128x128x40 tensor
    noise1_conv = conv_block(256, 6, 8)(noise1_con)  # that produces 256x256x8 tensor
    join1 = join_block(128, 40, 8)([join2_conv, noise1_conv])   # produces 256x256x48 tensor
    
    output = conv_block(256, 48, 3)(join1)   # produces 256x256x3 tensor
    
    model = tf.keras.models.Model([content, noise1, noise2, noise3, noise4, noise5, noise6], output, name = &#39;generator&#39;)
    
    return model
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;generator = generator_network()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;generator.summary()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Model: &amp;quot;generator&amp;quot;
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
content_input (InputLayer)      [(None, 256, 256, 3) 0                                            
__________________________________________________________________________________________________
noise_6 (InputLayer)            [(None, 8, 8, 3)]    0                                            
__________________________________________________________________________________________________
lambda_2 (Lambda)               (None, 8, 8, 3)      0           content_input[0][0]              
__________________________________________________________________________________________________
noise_5 (InputLayer)            [(None, 16, 16, 3)]  0                                            
__________________________________________________________________________________________________
lambda_3 (Lambda)               (None, 16, 16, 3)    0           content_input[0][0]              
__________________________________________________________________________________________________
concatenate_1 (Concatenate)     (None, 8, 8, 6)      0           noise_6[0][0]                    
                                                                 lambda_2[0][0]                   
__________________________________________________________________________________________________
concatenate_2 (Concatenate)     (None, 16, 16, 6)    0           noise_5[0][0]                    
                                                                 lambda_3[0][0]                   
__________________________________________________________________________________________________
model_2 (Model)                 (None, 8, 8, 8)      1192        concatenate_1[0][0]              
__________________________________________________________________________________________________
model_3 (Model)                 (None, 16, 16, 8)    1192        concatenate_2[0][0]              
__________________________________________________________________________________________________
noise_4 (InputLayer)            [(None, 32, 32, 3)]  0                                            
__________________________________________________________________________________________________
lambda_4 (Lambda)               (None, 32, 32, 3)    0           content_input[0][0]              
__________________________________________________________________________________________________
model_4 (Model)                 (None, 16, 16, 16)   64          model_2[1][0]                    
                                                                 model_3[1][0]                    
__________________________________________________________________________________________________
concatenate_3 (Concatenate)     (None, 32, 32, 6)    0           noise_4[0][0]                    
                                                                 lambda_4[0][0]                   
__________________________________________________________________________________________________
model_5 (Model)                 (None, 16, 16, 16)   5104        model_4[1][0]                    
__________________________________________________________________________________________________
model_6 (Model)                 (None, 32, 32, 8)    1192        concatenate_3[0][0]              
__________________________________________________________________________________________________
noise_3 (InputLayer)            [(None, 64, 64, 3)]  0                                            
__________________________________________________________________________________________________
lambda_5 (Lambda)               (None, 64, 64, 3)    0           content_input[0][0]              
__________________________________________________________________________________________________
model_7 (Model)                 (None, 32, 32, 24)   96          model_5[1][0]                    
                                                                 model_6[1][0]                    
__________________________________________________________________________________________________
concatenate_4 (Concatenate)     (None, 64, 64, 6)    0           noise_3[0][0]                    
                                                                 lambda_5[0][0]                   
__________________________________________________________________________________________________
model_8 (Model)                 (None, 32, 32, 24)   11304       model_7[1][0]                    
__________________________________________________________________________________________________
model_9 (Model)                 (None, 64, 64, 8)    1192        concatenate_4[0][0]              
__________________________________________________________________________________________________
noise_2 (InputLayer)            [(None, 128, 128, 3) 0                                            
__________________________________________________________________________________________________
lambda_6 (Lambda)               (None, 128, 128, 3)  0           content_input[0][0]              
__________________________________________________________________________________________________
model_10 (Model)                (None, 64, 64, 32)   128         model_8[1][0]                    
                                                                 model_9[1][0]                    
__________________________________________________________________________________________________
concatenate_5 (Concatenate)     (None, 128, 128, 6)  0           noise_2[0][0]                    
                                                                 lambda_6[0][0]                   
__________________________________________________________________________________________________
model_11 (Model)                (None, 64, 64, 32)   19936       model_10[1][0]                   
__________________________________________________________________________________________________
model_12 (Model)                (None, 128, 128, 8)  1192        concatenate_5[0][0]              
__________________________________________________________________________________________________
noise_1 (InputLayer)            [(None, 256, 256, 3) 0                                            
__________________________________________________________________________________________________
model_13 (Model)                (None, 128, 128, 40) 160         model_11[1][0]                   
                                                                 model_12[1][0]                   
__________________________________________________________________________________________________
concatenate_6 (Concatenate)     (None, 256, 256, 6)  0           noise_1[0][0]                    
                                                                 content_input[0][0]              
__________________________________________________________________________________________________
model_14 (Model)                (None, 128, 128, 40) 31000       model_13[1][0]                   
__________________________________________________________________________________________________
model_15 (Model)                (None, 256, 256, 8)  1192        concatenate_6[0][0]              
__________________________________________________________________________________________________
model_16 (Model)                (None, 256, 256, 48) 192         model_14[1][0]                   
                                                                 model_15[1][0]                   
__________________________________________________________________________________________________
model_17 (Model)                (None, 256, 256, 3)  1431        model_16[1][0]                   
==================================================================================================
Total params: 76,567
Trainable params: 75,269
Non-trainable params: 1,298
__________________________________________________________________________________________________
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf.keras.utils.plot_model(generator, show_shapes = True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_38_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we have a generator model with about 75,000 parameters.&lt;/p&gt;

&lt;p&gt;It should be clear that the low level features, i.e. the outputs of the lower level (closer to input layer that final layer in VGG19) layers are basically features such a strokes, edges which defines the artistic features of the image, whereas, high level features, i.e. the outputs of the higher level (closer to final layer than input layer in VGG19) are features that contains the summarization of the image, namely the abstract object that image contains, specifically the content of the image.&lt;/p&gt;

&lt;p&gt;However, Gatys et al. in their &lt;a href=&#34;https://arxiv.org/abs/1508.06576&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; &lt;strong&gt;A Neural Algorithm for Artistic Style&lt;/strong&gt; depicts that the style is basically represented by the correlation of the low level features of an image, rather than the particular output of those low level features. An intuitive explanation to this particular observation can be given as follows: Consider our style image to be an image of a floor covered with square tiles, like a chessboard. Now, think of applying this tiling style to a complicated image of a landscape. To do this, one may need to consider rotating the tiles to be in a shape like diamonds, which may be able to capture better details of some corners presented in the content image. In this case, if we have a vertical and horizontal line detecting kernels as well as criss-cross line detecting kernels in VGG19, then such a pattern would not give similar output for both style image and final stylized image, but would give similar amount of correlation between those features.&lt;/p&gt;

&lt;p&gt;Based on this idea, Gatys et al. introduced &lt;strong&gt;Gram Matrix&lt;/strong&gt; to measure the style of an image. Let us particularly concentration on one such low level layer first, for which we have a output tensor of shape (batch size, height of the image, width of the image, number of filters output). Then the corresponding gram matrix of this layer is defined as a matrix of shape (batch size, height of the image, width of the image), whose elements are given by;&lt;/p&gt;

&lt;p&gt;$$G_{bij} = \dfrac{\sum_c \sum_d X_{bijc} X_{bijd}}{HW}$$&lt;/p&gt;

&lt;p&gt;where $X$ is the output tensor of that layer, $H, W$ denoting the height and width of the images. This formula can be implemented by &lt;code&gt;tf.linalg.einsum&lt;/code&gt; function available in &lt;code&gt;tensorflow&lt;/code&gt;, which performs the sum operation (of the numerator here) based on a given equation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def gram_matrix(input_tensor):
    result = tf.linalg.einsum(&#39;bijc,bijd-&amp;gt;bcd&#39;, input_tensor, input_tensor)   # compute the sum in numerator
    input_shape = tf.shape(input_tensor)  # get the shape
    num_locations = tf.cast(input_shape[1]*input_shape[2], tf.float32)  
    return result/(num_locations)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I create a function called &lt;code&gt;vgg_layers&lt;/code&gt; which returns our descriptor network, given the name of layers of VGG19 network which will be used to compute content and style of the image outputted by Generator Network.&lt;/p&gt;

&lt;p&gt;Furthermore, a class called &lt;code&gt;TextureNetwork&lt;/code&gt; is created, which is inherited from &lt;code&gt;tf.keras.models.Model&lt;/code&gt;. &lt;code&gt;tf.keras.models.Model&lt;/code&gt; is a basic class to build new type of neural network model in &lt;code&gt;keras&lt;/code&gt;. Inheritence allows us to automatically defines several properties of the keras model, in order to perform optimization and necessary computation in the training stage. Any object of &lt;code&gt;TextureNetwork&lt;/code&gt; class is a Texture Network, initialized by specified names of content layers and style layers. Also, the &lt;code&gt;call&lt;/code&gt; method of the class has been overridden from call method of &lt;code&gt;tf.keras.models.Model&lt;/code&gt; class, which allows to define the exact workflow of feed forward system of our Texture Network. It finally outputs the generated image, along with the content output and style outputs (i.e. the gram matrices for style layers), which we can use to compute the loss function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def vgg_layers(layer_names):
    &amp;quot;&amp;quot;&amp;quot; Creates a vgg model that returns a list of intermediate output values.&amp;quot;&amp;quot;&amp;quot;
    # Load our model. Load pretrained VGG, trained on imagenet data
    vgg = tf.keras.applications.VGG19(include_top=False, weights=&#39;imagenet&#39;)  # load the vgg model
    vgg.trainable = False    # do not train over vgg model parameters
  
    outputs = [vgg.get_layer(name).output for name in layer_names]    # the output of the layers that we want

    model = tf.keras.Model([vgg.input], outputs)   # create a keras model
    return model


class TextureNetwork(tf.keras.models.Model):
    def __init__(self, style_layers, content_layers):
        super(TextureNetwork, self).__init__()   # initialize the superClass
        self.vgg =  vgg_layers(style_layers + content_layers)    # obtain a VGG19 model with outputs being the style and content layers
        self.style_layers = style_layers
        self.content_layers = content_layers
        self.num_style_layers = len(style_layers)
        self.vgg.trainable = False  # we are not going to train vgg network

        self.gen = generator_network()   # create a generator network as part of it
        self.gen.trainable = True   # we are going to train this generator
        

    def call(self, content, batch_size = 16):
        # generates noise required for the network
        noise1 = tf.random.uniform((batch_size, 256, 256, 3))
        noise2 = tf.random.uniform((batch_size, 128, 128, 3))
        noise3 = tf.random.uniform((batch_size, 64, 64, 3))
        noise4 = tf.random.uniform((batch_size, 32, 32, 3))
        noise5 = tf.random.uniform((batch_size, 16, 16, 3))
        noise6 = tf.random.uniform((batch_size, 8, 8, 3))
    
        gen_image = self.gen([content, noise1, noise2, noise3, noise4, noise5, noise6])   # pass through the generator to obtain generated image
    
        preprocessed_input = tf.keras.applications.vgg19.preprocess_input(gen_image)  # preprocess the image
        outputs = self.vgg(preprocessed_input)  # get the output from only the required layers
        
        style_outputs, content_outputs = (outputs[:self.num_style_layers], 
                                      outputs[self.num_style_layers:])
        
        style_outputs = [gram_matrix(style_output)
                         for style_output in style_outputs]  # create style type output to compare

        style_dict = {style_name:value
                      for style_name, value
                      in zip(self.style_layers, style_outputs)}

        content_dict = {content_name:value 
                    for content_name, value 
                    in zip(self.content_layers, content_outputs)}


        return {&#39;gen&#39;:gen_image, &#39;content&#39;:content_dict, &#39;style&#39;:style_dict}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have defined our Texture Network class, we need to specify exactly which layers we are going to use for style features. According to the &lt;a href=&#34;https://arxiv.org/abs/1603.03417&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; on Texture Network, the style layers should be &lt;em&gt;rel1_1, rel2_1, rel3_1, rel4_1&lt;/em&gt;, while the content layer should be &lt;em&gt;rel4_2&lt;/em&gt;. To compare it with the naming convention of VGG19, replace &lt;em&gt;rel&lt;/em&gt; with &lt;em&gt;block&lt;/em&gt; and add the convolution layer specified. However, I decided to add layer &lt;em&gt;block5_conv2&lt;/em&gt;, since according to Gatys et al. this layer has good features related to the content, and for the style image, we can get the tessellation effect accurately by using this particular layer. However, you are welcome to try different layers, which may result in interesting stylized images.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;style_layers = [&#39;block1_conv1&#39;,
                &#39;block2_conv1&#39;,
                &#39;block3_conv1&#39;,
                &#39;block4_conv1&#39;,
                &#39;block5_conv2&#39;]
content_layers = [&#39;block4_conv2&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;optimizer = tf.keras.optimizers.Adam(learning_rate = 1e-3)  # use an Adam optimizer
tex_net = TextureNetwork(style_layers, content_layers)   # create the texture network
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, since the initial weights are set to 0, or close to 0, the illiterate network produces a black image. So, let us teach the network to learn its trainable parameters and weights, so that it can produces meaningful outputs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;output = tex_net(content_image, 1)
tensor_to_image(output[&#39;gen&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_47_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Before training, we require the target variables, based on which our network compares its performance and computes the loss function. In the &lt;a href=&#34;https://arxiv.org/abs/1603.03417&#34; target=&#34;_blank&#34;&gt;paper&lt;/a&gt; on Texture Network, the author trains this network on MS COCO and ImageNet dataset. However, we shall use only the content and style image that we have repeatedly, since training on those large datasets would take particularly large amount of time and much computational power, which I lack because of scarcity of funds. So, I shall feed in the same content image and style image to the network repeatedly, and hope that the random noise inputs to the network is going to prevent overfitting of the network.&lt;/p&gt;

&lt;p&gt;So, I define a function called &lt;code&gt;extract targets&lt;/code&gt; which will extract the style and content from the style and content images, and then those values can be used to compute the loss function. To explicity write the loss function, we shall use the formula;&lt;/p&gt;

&lt;p&gt;$$\text{Loss} = w_c \times L_c + w_s \times \sum_{k} L_{s_k}$$&lt;/p&gt;

&lt;p&gt;where $L_c$ is the content loss, computed as the mean squared error between the content tensor of content image and the content tensor of generated image. $L_{s_k}$ is similar mean squared error between the gram matix of style image and gram matrix of generated image at $k$-th style layer, and $w_c$ and $w_s$ denotes the weights corresponding to content and style loss.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def extract_targets(inputs):
    inputs = inputs*255.0
    preprocessed_input = tf.keras.applications.vgg19.preprocess_input(inputs)  # preprocess the input image
    outputs = vgg_layers(style_layers + content_layers)(preprocessed_input)  # get the output from only the required layers
        
    style_outputs, content_outputs = (outputs[:len(style_layers)], 
                                       outputs[len(style_layers):])
        
    style_outputs = [gram_matrix(style_output)
                         for style_output in style_outputs]  # create style type output to compare

    style_dict = {style_name:value
                      for style_name, value
                      in zip(style_layers, style_outputs)}

    content_dict = {content_name:value 
                    for content_name, value 
                    in zip(content_layers, content_outputs)}

    return {&#39;content&#39;:content_dict, &#39;style&#39;:style_dict}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;style_targets = extract_targets(style_image)[&#39;style&#39;]
content_targets = extract_targets(content_image)[&#39;content&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;style_weight = 1e-5
content_weight = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This particular choice to style and content weights seems to work for me pretty well. However, you are encouraged to try out different style and content weight combination to dig up more interesting findings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def custom_loss(outputs, batch_size):
    gen_outputs = outputs[&#39;gen&#39;]
    style_outputs = outputs[&#39;style&#39;]   # for generated image, get the style
    content_outputs = outputs[&#39;content&#39;]  # get content
    batch_loss = 0
    for i in range(batch_size):
        style_loss = tf.add_n([tf.reduce_mean((style_outputs[name][i]-style_targets[name])**2) 
                           for name in style_outputs.keys()])
        style_loss *= style_weight / len(style_layers)

        content_loss = tf.add_n([tf.reduce_mean((content_outputs[name][i]-content_targets[name])**2) 
                                 for name in content_outputs.keys()])
        content_loss *= content_weight / len(content_layers)
        
        loss = style_loss + content_loss
        batch_loss += loss
        
    batch_loss /= batch_size
    return batch_loss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we define our &lt;code&gt;train_step&lt;/code&gt; method, which performs one step of training of the Texture Network. The &lt;code&gt;tf.function&lt;/code&gt; decorator used for the function actually converts this function and underlying object to tensorflow graph, based on which we can perform the feed forward pass as well as compute the gradients based on back propagation. Defining this decorator is essential for the training. More details on this is available at &lt;a href=&#34;https://www.tensorflow.org/tutorials/customization/performance&#34; target=&#34;_blank&#34;&gt;Tensorflow website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;train_step&lt;/code&gt; function, we use &lt;code&gt;tf.GradientTape&lt;/code&gt; to record the feed forward passes through the network. It works like computing a recording of the feed forward pass through the model, and finally playing it backwards, in order to perform back propagation. This gradient tape records all the gradients happening through the graph, and finally enables us to apply the training rule to update the current value of the parameters using these gradients by &lt;code&gt;apply_gradients&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@tf.function()
def train_step(content_image, batch_size):
    
    with tf.GradientTape() as tape:
        outputs = tex_net(content_image, batch_size)
        loss = custom_loss(outputs, batch_size)
        
    gradients = tape.gradient(loss, tex_net.trainable_variables)  # obtain the gradients recorded by the tape
    optimizer.apply_gradients(zip(gradients, tex_net.trainable_variables))   # apply the training rule using the gradients to modify the current value of prameters
    return output, loss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I used 2500 iterations of update to train the network. I also show the images generated by the network after each 250 iterations, to see how the network improves over training.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;batch_size = 32
my_content = tf.concat([content_image for _ in range(batch_size)], axis = 0)

n_epoch = 10
n_iter = 250
iter_to_show_output = 25

loss_array = []
for epoch in range(n_epoch):
    msg = &#39;Epoch: &#39; + str(epoch)
    print(msg)
    os.system(&#39;echo &#39; + msg)
    for step in range(n_iter):
        outputs, loss = train_step(my_content, batch_size)
        if step % iter_to_show_output == 0:
            os.system(&#39;echo loss: &#39; + str(float(loss)))
            print(&#39;Loss: &#39;, loss)
            loss_array.append(loss)
    display.display(tensor_to_image(tex_net(content_image, 1)[&#39;gen&#39;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 0
Loss:  tf.Tensor(27138224.0, shape=(), dtype=float32)
Loss:  tf.Tensor(26169034.0, shape=(), dtype=float32)
Loss:  tf.Tensor(26064738.0, shape=(), dtype=float32)
Loss:  tf.Tensor(26034120.0, shape=(), dtype=float32)
Loss:  tf.Tensor(26004590.0, shape=(), dtype=float32)
Loss:  tf.Tensor(24625778.0, shape=(), dtype=float32)
Loss:  tf.Tensor(22932934.0, shape=(), dtype=float32)
Loss:  tf.Tensor(22210894.0, shape=(), dtype=float32)
Loss:  tf.Tensor(21038836.0, shape=(), dtype=float32)
Loss:  tf.Tensor(19649052.0, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 1
Loss:  tf.Tensor(16565710.0, shape=(), dtype=float32)
Loss:  tf.Tensor(13611194.0, shape=(), dtype=float32)
Loss:  tf.Tensor(12152441.0, shape=(), dtype=float32)
Loss:  tf.Tensor(11187487.0, shape=(), dtype=float32)
Loss:  tf.Tensor(10576777.0, shape=(), dtype=float32)
Loss:  tf.Tensor(9360093.0, shape=(), dtype=float32)
Loss:  tf.Tensor(8675145.0, shape=(), dtype=float32)
Loss:  tf.Tensor(8301968.0, shape=(), dtype=float32)
Loss:  tf.Tensor(7836261.0, shape=(), dtype=float32)
Loss:  tf.Tensor(7389797.5, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 2
Loss:  tf.Tensor(7004705.0, shape=(), dtype=float32)
Loss:  tf.Tensor(6608028.0, shape=(), dtype=float32)
Loss:  tf.Tensor(6266657.5, shape=(), dtype=float32)
Loss:  tf.Tensor(6142354.0, shape=(), dtype=float32)
Loss:  tf.Tensor(5814227.0, shape=(), dtype=float32)
Loss:  tf.Tensor(5569461.0, shape=(), dtype=float32)
Loss:  tf.Tensor(5358932.5, shape=(), dtype=float32)
Loss:  tf.Tensor(5086491.0, shape=(), dtype=float32)
Loss:  tf.Tensor(4859027.0, shape=(), dtype=float32)
Loss:  tf.Tensor(4643354.0, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 3
Loss:  tf.Tensor(4957266.0, shape=(), dtype=float32)
Loss:  tf.Tensor(4299568.5, shape=(), dtype=float32)
Loss:  tf.Tensor(4091998.8, shape=(), dtype=float32)
Loss:  tf.Tensor(4018616.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3923811.2, shape=(), dtype=float32)
Loss:  tf.Tensor(3894964.5, shape=(), dtype=float32)
Loss:  tf.Tensor(3704813.2, shape=(), dtype=float32)
Loss:  tf.Tensor(3689166.5, shape=(), dtype=float32)
Loss:  tf.Tensor(3605529.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3521357.8, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_7.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 4
Loss:  tf.Tensor(3489987.0, shape=(), dtype=float32)
Loss:  tf.Tensor(3460784.0, shape=(), dtype=float32)
Loss:  tf.Tensor(3378974.0, shape=(), dtype=float32)
Loss:  tf.Tensor(3401102.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3323982.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3285243.0, shape=(), dtype=float32)
Loss:  tf.Tensor(3220874.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3295160.2, shape=(), dtype=float32)
Loss:  tf.Tensor(3169093.5, shape=(), dtype=float32)
Loss:  tf.Tensor(3131125.2, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_9.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 5
Loss:  tf.Tensor(3111150.5, shape=(), dtype=float32)
Loss:  tf.Tensor(3085978.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3064475.2, shape=(), dtype=float32)
Loss:  tf.Tensor(3012352.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2990475.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2958282.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2929994.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2923794.8, shape=(), dtype=float32)
Loss:  tf.Tensor(2887351.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2852276.8, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_11.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 6
Loss:  tf.Tensor(2829871.8, shape=(), dtype=float32)
Loss:  tf.Tensor(2833075.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2788235.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2777346.8, shape=(), dtype=float32)
Loss:  tf.Tensor(2735421.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2742302.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2696765.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2700100.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2741282.8, shape=(), dtype=float32)
Loss:  tf.Tensor(3431759.8, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_13.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 7
Loss:  tf.Tensor(2922398.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2783216.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2718686.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2677556.8, shape=(), dtype=float32)
Loss:  tf.Tensor(2645984.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2625516.8, shape=(), dtype=float32)
Loss:  tf.Tensor(2597460.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2577406.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2555875.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2537895.5, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_15.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 8
Loss:  tf.Tensor(2528999.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2511399.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2496434.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2484290.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2472602.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2465217.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2449646.8, shape=(), dtype=float32)
Loss:  tf.Tensor(2445076.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2431088.0, shape=(), dtype=float32)
Loss:  tf.Tensor(2422472.8, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_17.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 9
Loss:  tf.Tensor(2416303.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2413389.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2430066.5, shape=(), dtype=float32)
Loss:  tf.Tensor(3215110.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2591146.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2484897.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2440708.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2416797.5, shape=(), dtype=float32)
Loss:  tf.Tensor(2400430.2, shape=(), dtype=float32)
Loss:  tf.Tensor(2389489.8, shape=(), dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_57_19.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note how the generated image becomes better and better with more iteration, by mimicking the style of tessellation on our image of AI generated celebrity. But the image does not change much after epoch 5, except the colour gets more violet-ish rather than blue-ish. However, you can manipulate the style weights and content weights properly, in order to have a good balance between the content and style. Also, if we take a look at the loss function, we see that the loss was decreasing rapidly at the beginning, and finally it has more or less stabilized at a point where it cannot be lowered further by much. Hence, by looking at the loss function, it seems the generator is trained enough to meet its capacities.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(loss_array)
plt.title(&#39;Loss Function over time&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_59_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From the generation the final stylized image, it seems as if the image of the celebrity is properly tessellated, as we desired. However, it is mostly blue, and there are some funny artifacts and the colour of the skin appearing at the forehead area. This can possibly be resolved by carefully trying out different style and content layer repesentations, as well as adding a variational loss to the custom loss function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tensor_to_image(tex_net(content_image, 1)[&#39;gen&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_61_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;useful-references&#34;&gt;Useful References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Texture Networks: Feed-forward Synthesis of Textures and Stylized Images - Dmitry Ulyanov, Vadim Lebedev, Andrea Vedaldi, Victor Lempitsky. &lt;a href=&#34;https://arxiv.org/abs/1603.03417&#34; target=&#34;_blank&#34;&gt;https://arxiv.org/abs/1603.03417&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/tutorials/generative/style_transfer&#34; target=&#34;_blank&#34;&gt;https://www.tensorflow.org/tutorials/generative/style_transfer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Neural Algorithm of Artistic Style - Leon A. Gatys, Alexander S. Ecker, Matthias Bethge. &lt;a href=&#34;https://arxiv.org/abs/1508.06576&#34; target=&#34;_blank&#34;&gt;https://arxiv.org/abs/1508.06576&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DmitryUlyanov/texture_nets&#34; target=&#34;_blank&#34;&gt;https://github.com/DmitryUlyanov/texture_nets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perceptual Losses for Real-Time Style Transfer and Super-Resolution - Justin Johnson, Alexandre Alahi, Li Fei-Fei. &lt;a href=&#34;https://arxiv.org/abs/1603.08155&#34; target=&#34;_blank&#34;&gt;https://arxiv.org/abs/1603.08155&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Circular_convolution&#34; target=&#34;_blank&#34;&gt;https://en.wikipedia.org/wiki/Circular_convolution&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;thank-you-very-much-for-reading&#34;&gt;Thank you very much for reading!&lt;/h2&gt;

&lt;h3 id=&#34;if-you-find-it-interesting-please-consider-sharing&#34;&gt;If you find it interesting, please consider sharing!&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Integral Calculus for 10&#43;2 Level</title>
      <link>/post/post2/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/post2/</guid>
      <description>&lt;p&gt;This is an introductory notes for learning Integral Calculus and some useful tricks to perform integration at Pre-College level.&lt;/p&gt;

&lt;p&gt;You can find the notes by clicking &lt;a href=&#34;integration.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it! ð&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>D Basu Memorial Presentation on t-SNE: A way to Visualize Multidimensional Dataset</title>
      <link>/post/post1/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/post1/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
